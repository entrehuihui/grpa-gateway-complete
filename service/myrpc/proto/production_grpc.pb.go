// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: production.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Production_ProductionGet_FullMethodName  = "/proto.Production/ProductionGet"
	Production_ProductionPut_FullMethodName  = "/proto.Production/ProductionPut"
	Production_ProductionPost_FullMethodName = "/proto.Production/ProductionPost"
	Production_ProductionDel_FullMethodName  = "/proto.Production/ProductionDel"
)

// ProductionClient is the client API for Production service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductionClient interface {
	// 列表123123213
	ProductionGet(ctx context.Context, in *ProductionGetReq, opts ...grpc.CallOption) (*ProductionGetResp, error)
	// 修改123123
	ProductionPut(ctx context.Context, in *ProductionPutReq, opts ...grpc.CallOption) (*ProductionPutResp, error)
	// 新增123123
	ProductionPost(ctx context.Context, in *ProductionPostReq, opts ...grpc.CallOption) (*ProductionPostResp, error)
	// 删除123213
	ProductionDel(ctx context.Context, in *ProductionDelReq, opts ...grpc.CallOption) (*ProductionDelResp, error)
}

type productionClient struct {
	cc grpc.ClientConnInterface
}

func NewProductionClient(cc grpc.ClientConnInterface) ProductionClient {
	return &productionClient{cc}
}

func (c *productionClient) ProductionGet(ctx context.Context, in *ProductionGetReq, opts ...grpc.CallOption) (*ProductionGetResp, error) {
	out := new(ProductionGetResp)
	err := c.cc.Invoke(ctx, Production_ProductionGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionClient) ProductionPut(ctx context.Context, in *ProductionPutReq, opts ...grpc.CallOption) (*ProductionPutResp, error) {
	out := new(ProductionPutResp)
	err := c.cc.Invoke(ctx, Production_ProductionPut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionClient) ProductionPost(ctx context.Context, in *ProductionPostReq, opts ...grpc.CallOption) (*ProductionPostResp, error) {
	out := new(ProductionPostResp)
	err := c.cc.Invoke(ctx, Production_ProductionPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionClient) ProductionDel(ctx context.Context, in *ProductionDelReq, opts ...grpc.CallOption) (*ProductionDelResp, error) {
	out := new(ProductionDelResp)
	err := c.cc.Invoke(ctx, Production_ProductionDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductionServer is the server API for Production service.
// All implementations must embed UnimplementedProductionServer
// for forward compatibility
type ProductionServer interface {
	// 列表123123213
	ProductionGet(context.Context, *ProductionGetReq) (*ProductionGetResp, error)
	// 修改123123
	ProductionPut(context.Context, *ProductionPutReq) (*ProductionPutResp, error)
	// 新增123123
	ProductionPost(context.Context, *ProductionPostReq) (*ProductionPostResp, error)
	// 删除123213
	ProductionDel(context.Context, *ProductionDelReq) (*ProductionDelResp, error)
	mustEmbedUnimplementedProductionServer()
}

// UnimplementedProductionServer must be embedded to have forward compatible implementations.
type UnimplementedProductionServer struct {
}

func (UnimplementedProductionServer) ProductionGet(context.Context, *ProductionGetReq) (*ProductionGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionGet not implemented")
}
func (UnimplementedProductionServer) ProductionPut(context.Context, *ProductionPutReq) (*ProductionPutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionPut not implemented")
}
func (UnimplementedProductionServer) ProductionPost(context.Context, *ProductionPostReq) (*ProductionPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionPost not implemented")
}
func (UnimplementedProductionServer) ProductionDel(context.Context, *ProductionDelReq) (*ProductionDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductionDel not implemented")
}
func (UnimplementedProductionServer) mustEmbedUnimplementedProductionServer() {}

// UnsafeProductionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductionServer will
// result in compilation errors.
type UnsafeProductionServer interface {
	mustEmbedUnimplementedProductionServer()
}

func RegisterProductionServer(s grpc.ServiceRegistrar, srv ProductionServer) {
	s.RegisterService(&Production_ServiceDesc, srv)
}

func _Production_ProductionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionServer).ProductionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Production_ProductionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionServer).ProductionGet(ctx, req.(*ProductionGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Production_ProductionPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionPutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionServer).ProductionPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Production_ProductionPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionServer).ProductionPut(ctx, req.(*ProductionPutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Production_ProductionPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionServer).ProductionPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Production_ProductionPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionServer).ProductionPost(ctx, req.(*ProductionPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Production_ProductionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionServer).ProductionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Production_ProductionDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionServer).ProductionDel(ctx, req.(*ProductionDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Production_ServiceDesc is the grpc.ServiceDesc for Production service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Production_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Production",
	HandlerType: (*ProductionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductionGet",
			Handler:    _Production_ProductionGet_Handler,
		},
		{
			MethodName: "ProductionPut",
			Handler:    _Production_ProductionPut_Handler,
		},
		{
			MethodName: "ProductionPost",
			Handler:    _Production_ProductionPost_Handler,
		},
		{
			MethodName: "ProductionDel",
			Handler:    _Production_ProductionDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "production.proto",
}
